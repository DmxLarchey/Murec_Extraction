Require Import Utf8.

From MuRec Require Import index.

Reserved Notation "v .[ i ]" (at level 1, format "v .[ i ]").
Reserved Notation "x '‚à∑' v" (at level 60, right associativity, format "x  ‚à∑  v").
Reserved Notation "‚ü® ‚ü©" (at level 0, format "‚ü® ‚ü©").

Section vec_basics.

  Variable X : Type.

  Inductive vec : nat ‚Üí Type :=
    | vec_nil  : vec 0
    | vec_cons {n} : X ‚Üí vec n ‚Üí vec (S n).

  Notation "‚ü® ‚ü©" := vec_nil.
  Infix "‚à∑" := vec_cons.

  Inductive vec_shape_O : vec 0 ‚Üí Type :=
    | vec_shape_O_intro : vec_shape_O ‚ü®‚ü©.

  Inductive vec_shape_S n : vec (S n) ‚Üí Type :=
    | vec_shape_S_intro x v : vec_shape_S n (x ‚à∑ v).

  Definition vec_inv {n} v :
    match n return vec n -> Type with
    | 0   => vec_shape_O
    | S n => vec_shape_S n
    end v.
  Proof. destruct v; constructor. Qed.

  Section vec_O_inv.

    Let vec_O_inv_t {n} : vec n ‚Üí Type :=
      match n with
      | 0 => Œª v, ‚àÄP, P ‚ü®‚ü© ‚Üí P v
      | _ => Œª _, Empty_set ‚Üí unit
      end.

    Variables (P : vec 0 ‚Üí Type)
              (HP : P ‚ü®‚ü©).

    Definition vec_O_inv v : P v :=
      match v return vec_O_inv_t v with
      | ‚ü®‚ü© => Œª P HP, HP
      | _  => Œª C, match C with end
      end P HP.

  End vec_O_inv.

  Section vec_S_inv.

    Let vec_S_inv_t {n} : vec n ‚Üí Type :=
      match n with
      | 0 => Œª _, Empty_set ‚Üí unit
      | _ => Œª v, ‚àÄP, (‚àÄx w, P (x ‚à∑ w)) ‚Üí P v
      end.

    Variables (n : nat)
              (P : vec (S n) ‚Üí Type)
              (HP : ‚àÄx v, P (x ‚à∑ v)).

    Definition vec_S_inv v : P v :=
      match v return vec_S_inv_t v with
      | ‚ü®‚ü©    => Œª C, match C with end
      | y ‚à∑ u => Œª P HP, HP y u
      end P HP.

  End vec_S_inv.

  Arguments vec_S_inv {_ _}.

  (* Beware that with that definition, vec_{head,tail} are not recognized
     as sub-terms of v. This could be needed in case of Fixpoints on
     inductive types nesting vec. The cause of this is the dependent pattern-matching
     returning vec_S_inv_t in vec_S_inv. The more standard definition of 
     vec_head (resp. vec_tail) does not have this issue because the return type
     is eg is_succ n ‚Üí X which becomes non-dependent when (n := S _). *)

  Definition vec_head {n} : vec (S n) ‚Üí X := vec_S_inv (Œª x _,x).
  Definition vec_tail {n} : vec (S n) ‚Üí vec n := vec_S_inv (Œª _ v,v).

  Goal ‚àÄn (v : vec (S n)), v = vec_head v ‚à∑ vec_tail v.
  Proof. intros n v; now destruct (vec_inv v). Qed.

  (* This definition is compatible with the recalg_rect Fixpoint, meaning
     that (vec_prj v i) is recognized as a sub-term of v in that Fixpoint *)

  Fixpoint vec_prj {n} (u : vec n) : idx n ‚Üí X :=
    match u in vec m return idx m ‚Üí X with
    | ‚ü®‚ü©    => Œª i, match idx_inv i with end
    | x ‚à∑ v => Œª i,
      match i in idx m return vec (pred m) ‚Üí X with
      | ùïÜ   => Œª _, x
      | ùïä j => Œª v, v.[j]
      end v
    end
  where "v .[ i ]" := (vec_prj v i).

  Local Example vec_prj_conv_eq_0 n x (v : vec n) : (x ‚à∑ v).[ùïÜ] = x.
  Proof. reflexivity. Qed.

  Local Example vec_prj_conv_eq_S n x (v : vec n) i : (x ‚à∑ v).[ùïä i] = v.[i].
  Proof. reflexivity. Qed.

  Fact vec_prj_ext {n} (v w : vec n) : (‚àÄi, v.[i] = w.[i]) ‚Üí v = w.
  Proof.
    revert w; induction v as [ | n x v IHv ]; intros w H.
    + now destruct (vec_inv w).
    + destruct (vec_inv w) as [y w]; f_equal.
      * apply (H ùïÜ).
      * apply IHv.
        intro; apply (H (ùïä _)).
  Qed.

End vec_basics.

Arguments vec_nil {_}.
Arguments vec_cons {_ _}.
Arguments vec_inv {_ _}.
Arguments vec_prj {_ _}.
Arguments vec_head {_ _} _ /.
Arguments vec_tail {_ _} _ /.

Arguments vec_O_inv {_ _}.
Arguments vec_S_inv {_ _ _}.

Notation "‚ü® ‚ü©" := vec_nil.
Infix "‚à∑" := vec_cons.
Notation "v .[ i ]" := (vec_prj v i).

Section vec_map.

  Context {A B: Type} (f : A ‚Üí B).

  Fixpoint vec_map {n} (v : vec A n) : vec B n :=
    match v with
    | ‚ü®‚ü©    => ‚ü®‚ü©
    | a ‚à∑ v => f a ‚à∑ vec_map v
    end.

  Fact vec_prj_map n (v : vec A n) : ‚àÄi, (vec_map v).[i] = f v.[i].
  Proof. induction v; intro i; destruct (idx_inv i); cbn; trivial. Qed.

End vec_map.

Notation "‚ü® x ‚ü©" :=  (x ‚à∑ ‚ü®‚ü©) (at level 0, format "‚ü® x ‚ü©").
Notation "‚ü® x ; y ; .. ; z ‚ü©" :=  (x ‚à∑ (y ‚à∑ .. (z ‚à∑ ‚ü®‚ü©) ..)) (at level 0, format "‚ü® x ; y ; .. ; z ‚ü©").
