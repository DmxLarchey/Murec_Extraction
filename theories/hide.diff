diff --git a/theories/compute.v b/theories/compute.v
index ee4b4e1..d9bb074 100644
--- a/theories/compute.v
+++ b/theories/compute.v
@@ -83,9 +83,9 @@ Section Pr_compute.
   Definition Pr_compute : ∀Va', compute (Pr ⟦Sa⟧ ⟦Sa''⟧ Va') :=
     vec_S_inv (λ z Va,
       prim_rec_compute (ra_sem_fun _)
-                       (λ V dV, cSa V dV)
+                       (λ p, cSa (π₁ p) (π₂ p))
                        (λ _ _ _, ra_sem_fun _ _)
-                       (λ V n x cVnx, cSa'' (n ∷ x ∷ V) cVnx)
+                       (λ V n x, cSa'' (n ∷ π₁ x ∷ V) (π₂ x))
                        Va
                        z
     ).
@@ -100,7 +100,7 @@ Section Mn_compute.
 
   Definition Mn_compute Va : compute (Mn ⟦Sa'⟧ Va) :=
     umin₀_compute (λ _, ra_sem_fun _ _)
-                  (λ n dn, cSa' (n ∷ Va) dn).
+                  (λ p, cSa' (π₁ p ∷ Va) (π₂ p)).
 
 End Mn_compute.
 
diff --git a/theories/interpreter.v b/theories/interpreter.v
index 1f7f63e..61c778c 100644
--- a/theories/interpreter.v
+++ b/theories/interpreter.v
@@ -59,7 +59,7 @@ Section recalg_coq.
     | ra_zero         => Zr_compute
     | ra_succ         => Sc_compute
     | ra_proj i       => Id_compute i
-    | ra_comp Sb Sab  => Cn_compute ⟦Sb⟧ₒ (λ Va dVa, vec_map_compute (λ Sa, ⟦Sa⟧ₒ Va) Sab dVa)
+    | ra_comp Sb Sab  => Cn_compute ⟦Sb⟧ₒ (λ Va dVa, vec_map_compute (λ x, ⟦x⟧ Va) (λ p, ⟦π₁ p⟧ₒ Va (π₂ p)) Sab dVa)
     | ra_prec Sb Sb'' => Pr_compute ⟦Sb⟧ₒ ⟦Sb''⟧ₒ
     | ra_umin Sb'     => Mn_compute ⟦Sb'⟧ₒ
     end
diff --git a/theories/linear_search.v b/theories/linear_search.v
index 2cb83fd..ba918c4 100644
--- a/theories/linear_search.v
+++ b/theories/linear_search.v
@@ -90,9 +90,7 @@ Section linear_search.
     exact @𝔻ls_next.
   Qed.
 
-  (* test is specified by ∀n, Dtest n → {P n} + {Q n}
-     so it is possible that neither P nor Q hold outside of Dtest *)
-  Variable test : ∀n, Dtest n → {P n} + {Q n}.
+  Variable test : ∀p : { n | Dtest n }, {P (π₁ p)} + {Q (π₁ p)}.
 
   (* loop_ℕ : ∀n, 𝔻ls n → nat
 
@@ -104,7 +102,7 @@ Section linear_search.
      Notice that it is a "recursive terminal" function. *)
 
   Local Fixpoint loop_ℕ n (d : 𝔻ls n) : nat :=
-    match test n (𝔻ls_π₁ d) with
+    match test ⟪n,𝔻ls_π₁ d⟫ with
     | left p  => n
     | right q => loop_ℕ (S n) (𝔻ls_π₂ d q)
     end.
@@ -125,7 +123,7 @@ Section linear_search.
 
   Let Fixpoint loop n (d : 𝔻ls n) (b : btwn (Dtest ∧₁ Q) s n) : sig (ℙost_ls s) :=
     let t := 𝔻ls_π₁ d in
-    match test n t with
+    match test ⟪n,t⟫ with
     | left p  => ⟪n, ⟨t,p, b⟩ₚ⟫
     | right q => loop (S n) (𝔻ls_π₂ d q) (btwn_next b ⟨t,q⟩ₚ)
     end.
diff --git a/theories/map_compute.v b/theories/map_compute.v
index 4081d24..f49607b 100644
--- a/theories/map_compute.v
+++ b/theories/map_compute.v
@@ -17,7 +17,7 @@ Section vec_map_compute.
 
   Variables (X Y : Type)
             (F : X → Y → Prop)
-            (f : ∀ x, compute (F x)).
+            (f : ∀ p : { x | ex (F x) }, sig (F (π₁ p))).
 
   Section vec_map_compute_props.
 
@@ -41,7 +41,7 @@ Section vec_map_compute.
     let fix loop {n} (v : vec X n) : (∀i, ex (F v.[i])) → _ :=
       match v with
       | ⟨⟩    => λ _,   ⟪⟨⟩, vmc_PO1⟫
-      | x ∷ v => λ Fxv, let (y, x_y) := f x (Fxv 𝕆) in
+      | x ∷ v => λ Fxv, let (y, x_y) := f ⟪x,Fxv 𝕆⟫ in
                         let (w, v_w) := loop v (λ i, Fxv (𝕊 i)) in
                         ⟪y ∷ w, vmc_PO2 x_y v_w⟫
       end in
@@ -49,5 +49,5 @@ Section vec_map_compute.
 
 End vec_map_compute.
 
-Arguments vec_map_compute {_ _ _} _ {n} v.
+Arguments vec_map_compute {_ _} _ _ {n} v.
 
diff --git a/theories/prim_rec_compute.v b/theories/prim_rec_compute.v
index 5095ac1..5f449c3 100644
--- a/theories/prim_rec_compute.v
+++ b/theories/prim_rec_compute.v
@@ -18,10 +18,10 @@ Section prec_compute.
   Variables (X Y : Type)
             (F : X → Y → Prop)
             (Ffun : functional F)
-            (Fcomp : ∀x, compute (F x))
+            (Fcomp : ∀ p : { x | ex (F x) }, sig (F (π₁ p)))
             (G : X → nat → Y → Y → Prop)
             (Gfun : ∀ x n, functional (G x n))
-            (Gcomp : ∀ x n y, compute (G x n y))
+            (Gcomp : ∀ x n (p : { y | ex (G x n y) }), sig (G x n (π₁ p)))
             (x : X).
 
   Section prim_rec_compute_props.
@@ -56,9 +56,9 @@ Section prec_compute.
 
   Fixpoint prim_rec_compute m : compute (prim_rec F G x m) :=
     match m with
-      | 0   => λ d, Fcomp x d
+      | 0   => λ d, Fcomp ⟪x,d⟫
       | S n => λ d, let (yn , y_yn)   := prim_rec_compute n (prc_TC1 d) in
-                    let (yn', yn_yn') := Gcomp x n yn (prc_TC2 d y_yn) in
+                    let (yn', yn_yn') := Gcomp x n ⟪yn,prc_TC2 d y_yn⟫ in
                     ⟪yn', prc_PO1 y_yn yn_yn'⟫
     end.
 
diff --git a/theories/umin_compute.v b/theories/umin_compute.v
index 60b2a16..2428cfe 100644
--- a/theories/umin_compute.v
+++ b/theories/umin_compute.v
@@ -17,7 +17,7 @@ Section umin_compute.
 
   Variable (F : nat → nat → Prop)
            (Ffun : functional F)
-           (f : ∀n, compute (F n)).
+           (f : ∀ p : { n | ex (F n) }, sig (F (π₁ p))).
 
   Arguments Ffun {_ _ _}.
 
@@ -50,7 +50,7 @@ Section umin_compute.
   (* The Let before the Fixpoint below forces the inlining of loop inside
      linear_search *)
   Let Fixpoint loop n (d : 𝔻 n) (b : btwn (pos_at F) s n) : sig (umin F s) :=
-    let (k,Hk) := f n (𝔻_π₁ d) in
+    let (k,Hk) := f ⟪n,𝔻_π₁ d⟫ in
     match k return F _ k → _ with
     | 0   => λ e, ⟪n, ⟨e,b⟩ₚ⟫
     | S _ => λ e, loop (S n) (𝔻_π₂ d ⟪_,e⟫ₚ) (btwn_next b ⟪_,e⟫ₚ)
@@ -82,7 +82,7 @@ Section umin₀_compute.
 
   Variable (F : nat → nat → Prop)
            (Ffun : functional F)
-           (f : ∀n, compute (F n)).
+           (f : ∀ p : { n | ex (F n) }, sig (F (π₁ p))).
 
   Definition umin₀_compute : compute (umin₀ F) :=
     sig_monotonic umin_umin₀  ∘  umin_compute Ffun f 0  ∘  ex_monotonic umin₀_umin.
diff --git a/theories/umin_compute_details.v b/theories/umin_compute_details.v
index 3783ae6..673a730 100644
--- a/theories/umin_compute_details.v
+++ b/theories/umin_compute_details.v
@@ -17,7 +17,7 @@ Section umin_compute.
 
   Variable (F : nat → nat → Prop)
            (Ffun : functional F)
-           (f : ∀n, compute (F n)).
+           (f : ∀ p : { n | ex (F n) }, sig (F (π₁ p))).
 
   Arguments Ffun {_ _ _}.
 
@@ -43,7 +43,7 @@ Section umin_compute.
 
   (* Instanciation of test *)
   Let test n (t : Dtest n) : {P n} + {Q n} :=
-    let (k, Hk) := f n t in
+    let (k, Hk) := f ⟪n,t⟫ in
     match k return F _ k → _ with
     | 0   => λ e, left e
     | S k => λ e, right ⟪k,e⟫ₚ
@@ -60,7 +60,7 @@ Section umin_compute.
   (* Inlining the current instance of test inside loop_orig *)
   Local Fixpoint loop_inline n (d : 𝔻 n) (b : btwn (Dtest ∧₁ Q) s n) : sig (ℙost s) :=
     let t := 𝔻_π₁ d in
-    let (k, Hk) := f n t in
+    let (k, Hk) := f ⟪n,t⟫ in
     let te := match k return F _ k → _ with
               | 0   => λ e, left e
               | S k => λ e, right ⟪_,e⟫ₚ
@@ -73,7 +73,7 @@ Section umin_compute.
   (* Easy program transformation: the intermediate te is bypassed *)
   Local Fixpoint loop_opt n (d : 𝔻 n) (b : btwn (Dtest ∧₁ Q) s n) : sig (ℙost s) :=
     let t := 𝔻_π₁ d in
-    let (k, Hk) := f n t in
+    let (k, Hk) := f ⟪n,t⟫ in
     match k return F _ k → _ with
     | 0   => λ e, ⟪n, ⟨t,e, b⟩ₚ⟫
     | S k => λ e, loop_opt (S n) (𝔻_π₂ d ⟪_,e⟫ₚ) (btwn_next b ⟨t, ⟪_,e⟫ₚ⟩ₚ)
@@ -97,7 +97,7 @@ Section umin_compute.
   (* The Let before the Fixpoint below forces the inlining of loop inside
      linear_search *)
   Let Fixpoint loop n (d : 𝔻 n) (b : btwn (pos_at F) s n) : sig (umin F s) :=
-    let (k,Hk) := f n (𝔻_π₁ d) in
+    let (k,Hk) := f ⟪n,𝔻_π₁ d⟫ in
     match k return F _ k → _ with
     | 0   => λ e, ⟪n, ⟨e,b⟩ₚ⟫
     | S _ => λ e, loop (S n) (𝔻_π₂ d ⟪_,e⟫ₚ) (btwn_next b ⟪_,e⟫ₚ)
@@ -132,7 +132,7 @@ Section umin₀_compute.
 
   Variable (F : nat → nat → Prop)
            (Ffun : functional F)
-           (f : ∀n, compute (F n)).
+           (f : ∀ p : { n | ex (F n) }, sig (F (π₁ p))).
 
   Definition umin₀_compute : compute (umin₀ F) :=
     sig_monotonic umin_umin₀  ∘  umin_compute Ffun f 0  ∘  ex_monotonic umin₀_umin.
